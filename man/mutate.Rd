% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/mutate-S4methods.R
\docType{methods}
\name{mutateAll}
\alias{mutateAll}
\alias{mutateAt}
\alias{mutateIf}
\alias{transmuteAt}
\alias{transmuteIf}
\alias{mutate}
\alias{mutateAll,data.frame-method}
\alias{mutateAll,DataFrame-method}
\alias{mutateAt,data.frame-method}
\alias{mutateAt,DataFrame-method}
\alias{mutateIf,data.frame-method}
\alias{mutateIf,DataFrame-method}
\alias{transmuteAt,data.frame-method}
\alias{transmuteAt,DataFrame-method}
\alias{transmuteIf,data.frame-method}
\alias{transmuteIf,DataFrame-method}
\title{Mutate multiple columns}
\usage{
mutateAll(.tbl, ...)

mutateAt(.tbl, ...)

mutateIf(.tbl, ...)

transmuteAt(.tbl, ...)

transmuteIf(.tbl, ...)

\S4method{mutateAll}{data.frame}(.tbl, .funs, ...)

\S4method{mutateAll}{DataFrame}(.tbl, .funs, ...)

\S4method{mutateAt}{data.frame}(.tbl, .vars, .funs, ...)

\S4method{mutateAt}{DataFrame}(.tbl, .vars, .funs, ...)

\S4method{mutateIf}{data.frame}(.tbl, .predicate, .funs, ...)

\S4method{mutateIf}{DataFrame}(.tbl, .predicate, .funs, ...)

\S4method{transmuteAt}{data.frame}(.tbl, .vars, .funs, ...)

\S4method{transmuteAt}{DataFrame}(.tbl, .vars, .funs, ...)

\S4method{transmuteIf}{data.frame}(.tbl, .predicate, .funs, ...)

\S4method{transmuteIf}{DataFrame}(.tbl, .predicate, .funs, ...)
}
\arguments{
\item{.tbl}{Object.}

\item{...}{Additional argument.}

\item{.funs, .predicate}{\code{function}.
Refer to dplyr documentation for details.}

\item{.vars}{\code{character}.
Column names.}
}
\value{
Modified object.
}
\description{
Mutate multiple columns
}
\note{
Updated 2019-08-15.
}
\section{\code{data.frame} methods}{


Since we are defining S4 methods in this package, we are providing
passthrough support to dplyr for \code{data.frame} class objects. Our generic
methods pass through to dplyr mutate functions, which are optimized for
\code{tbl_df} class.

Refer to \code{help(topic = "mutate_all", package = "dplyr")} for details.
}

\examples{
data(mtcars, package = "datasets")

## DataFrame ====
x <- as(mtcars, "DataFrame")
mutateAll(x, .funs = log, base = 2L)
mutateAt(x, .vars = c("mpg", "cyl"), log, base = 2L)
mutateIf(x, .predicate = is.double, .funs = as.integer)
transmuteAt(x, .vars = c("mpg", "cyl"), log, base = 2L)
transmuteIf(x, .predicate = is.double, .funs = as.integer)
}
