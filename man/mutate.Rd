% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/dplyr-mutate-S4methods.R
\docType{methods}
\name{mutate_all}
\alias{mutate_all}
\alias{mutate_at}
\alias{mutate_if}
\alias{transmute_at}
\alias{transmute_if}
\alias{mutate}
\alias{mutate_all,data.frame-method}
\alias{mutate_all,DataFrame-method}
\alias{mutate_at,data.frame-method}
\alias{mutate_at,DataFrame-method}
\alias{mutate_if,data.frame-method}
\alias{mutate_if,DataFrame-method}
\alias{transmute_at,data.frame-method}
\alias{transmute_at,DataFrame-method}
\alias{transmute_if,data.frame-method}
\alias{transmute_if,DataFrame-method}
\title{Mutate multiple columns}
\usage{
mutate_all(.tbl, ...)

mutate_at(.tbl, ...)

mutate_if(.tbl, ...)

transmute_at(.tbl, ...)

transmute_if(.tbl, ...)

\S4method{mutate_all}{data.frame}(.tbl, .funs, ...)

\S4method{mutate_all}{DataFrame}(.tbl, .funs, ...)

\S4method{mutate_at}{data.frame}(.tbl, .vars, .funs, ...)

\S4method{mutate_at}{DataFrame}(.tbl, .vars, .funs, ...)

\S4method{mutate_if}{data.frame}(.tbl, .predicate, .funs, ...)

\S4method{mutate_if}{DataFrame}(.tbl, .predicate, .funs, ...)

\S4method{transmute_at}{data.frame}(.tbl, .vars, .funs, ...)

\S4method{transmute_at}{DataFrame}(.tbl, .vars, .funs, ...)

\S4method{transmute_if}{data.frame}(.tbl, .predicate, .funs, ...)

\S4method{transmute_if}{DataFrame}(.tbl, .predicate, .funs, ...)
}
\arguments{
\item{.tbl}{A \code{tbl} object.}

\item{...}{Additional arguments for the function calls in
\code{.funs}. These are evaluated only once, with \link[rlang:tidy-dots]{tidy dots} support.}

\item{.funs}{A function \code{fun}, a quosure style lambda \code{~ fun(.)} or a list of either form.}

\item{.vars}{A list of columns generated by \code{\link[=vars]{vars()}},
a character vector of column names, a numeric vector of column
positions, or \code{NULL}.}

\item{.predicate}{A predicate function to be applied to the columns
or a logical vector. The variables for which \code{.predicate} is or
returns \code{TRUE} are selected. This argument is passed to
\code{\link[rlang:as_function]{rlang::as_function()}} and thus supports quosure-style lambda
functions and strings representing function names.}
}
\value{
Modified object.
}
\description{
The \link{scoped} variants of \code{\link[=mutate]{mutate()}} and \code{\link[=transmute]{transmute()}} make it easy to apply
the same transformation to multiple variables. There are three variants:
\itemize{
\item _all affects every variable
\item _at affects variables selected with a character vector or vars()
\item _if affects variables selected with a predicate function:
}
}
\note{
Updated 2019-08-15.
}
\section{\code{data.frame} methods}{


Since we are defining S4 methods in this package, we are providing
passthrough support to dplyr for \code{data.frame} class objects. Our generic
methods pass through to dplyr mutate functions, which are optimized for
\code{tbl_df} class.

Refer to \code{help(topic = "mutate_all", package = "dplyr")} for details.
}

\examples{
data(mtcars, package = "datasets")

## DataFrame ====
x <- as(mtcars, "DataFrame")
mutate_all(x, .funs = log, base = 2L)
mutate_at(x, .vars = c("mpg", "cyl"), log, base = 2L)
mutate_if(x, .predicate = is.double, .funs = as.integer)
transmute_at(x, .vars = c("mpg", "cyl"), log, base = 2L)
transmute_if(x, .predicate = is.double, .funs = as.integer)
}
