% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/AllGenerics.R, R/mutate-methods.R
\docType{methods}
\name{mutateAll}
\alias{mutateAll}
\alias{mutateAt}
\alias{mutateIf}
\alias{transmuteAt}
\alias{transmuteIf}
\alias{mutate}
\alias{mutateAll,DataFrame-method}
\alias{mutateAt,DataFrame-method}
\alias{mutateIf,DataFrame-method}
\alias{transmuteAt,DataFrame-method}
\alias{transmuteIf,DataFrame-method}
\title{Mutate multiple columns}
\usage{
mutateAll(object, ...)

mutateAt(object, ...)

mutateIf(object, ...)

transmuteAt(object, ...)

transmuteIf(object, ...)

\S4method{mutateAll}{DataFrame}(object, .fun, ...)

\S4method{mutateAt}{DataFrame}(object, .vars, .fun, ...)

\S4method{mutateIf}{DataFrame}(object, .predicate, .fun, ...)

\S4method{transmuteAt}{DataFrame}(object, .vars, .fun, ...)

\S4method{transmuteIf}{DataFrame}(object, .predicate, .fun, ...)
}
\arguments{
\item{object}{Object.}

\item{...}{Passthrough arguments to function declared in \code{.fun} argument.}

\item{.fun}{\code{function}.
Mutation function.}

\item{.vars}{\code{character}.
Column names.}

\item{.predicate}{\code{function} or \code{logical}.
A predicate function to be applied to the columns, or a logical vector
matching the number of columns.}
}
\value{
Modified object.
}
\description{
Mutate multiple columns
}
\note{
Updated 2019-08-23.
}
\examples{
data(mtcars, package = "datasets")

## DataFrame ====
x <- as(mtcars, "DataFrame")
mutateAll(x, .fun = log, base = 2L)
mutateAt(x, .vars = c("mpg", "cyl"), .fun = log, base = 2L)
mutateIf(x, .predicate = is.double, .fun = as.integer)
transmuteAt(x, .vars = c("mpg", "cyl"), .fun = log, base = 2L)
transmuteIf(x, .predicate = is.double, .fun = as.integer)
}
\seealso{
\itemize{
\item \code{help(topic = "mutate_all", package = "dplyr")}
}
}
